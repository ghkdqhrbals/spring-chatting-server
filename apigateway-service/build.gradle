plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = project.rootProject.ext.projectVersion
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootJar {
	enabled = true
}

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.1")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-config', version: '4.0.0'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.0.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

//tasks.named('test') {
//	useJUnitPlatform()
//}
// find the latest jar file in the build/libs directory
def findLatestJar() {
	def jarDir = file("${project.buildDir}/libs")
	def latestJar = null
	if (jarDir.isDirectory()) {
		jarDir.eachFile { file ->
			if (file.name.endsWith('.jar') && !file.name.endsWith('-plain.jar')) { // plain JAR 파일 제외
				if (latestJar == null || file.lastModified() > latestJar.lastModified()) {
					latestJar = file
				}
			}
		}
	}
	return latestJar
}

// create Dockerfile
task generateDockerfile {
	doLast {
		println "Generating Dockerfile from the latest JAR file..."
		def latestJarFile = findLatestJar()
		if (latestJarFile != null) {
			println "Latest Path: \${projectPath}${latestJarFile.absolutePath.replace(project.projectDir.absolutePath, '')}"
			def dockerfileContent =
					"""
FROM openjdk:17-alpine

WORKDIR /${group}

COPY ${latestJarFile.absolutePath.replace(project.projectDir.absolutePath, '')} /${group}/app.jar
ENTRYPOINT java -jar app.jar

LABEL version="${version}"
"""

			// 생성된 Dockerfile 내용을 저장
			file("${project.projectDir}/Dockerfile").text = dockerfileContent
		} else {
			throw new GradleException("No JAR files found in ${project.buildDir}/libs")
		}
	}
}

// build Dockerfile using the latest jar file after the jar file is created
build.finalizedBy generateDockerfile