version : '3.7'
# Config-server : "43.202.52.177"
services:
  # ********** Backbone **********
  # -------- KAFKA --------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - "8097:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    restart: always
  # -------- kafdrop for visualization --------
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9092"
      JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    ports:
      - 9010:9000
    depends_on:
      - kafka1
      - zookeeper


  # -------- Discovery Service --------
  discovery-server:
    container_name: discovery-server
    build:
      context: ./discovery
      dockerfile: Dockerfile
    image: main-service_discovery-server:latest
    ports:
      - "8761:8761"
    environment:
      SPRING_RABBITMQ_HOST: "43.202.52.177"
    restart: always

  # Service
  user-server:
    container_name: user-server
    build:
      context: ./shop-user-service
      dockerfile: Dockerfile
    image: main-service_user-server:latest
    ports:
      - "8010:8010"
    links:
      - user-redis
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      SPRING_MAIN_web-application-type: reactive
      SPRING_RABBITMQ_HOST: "43.202.52.177"
      SPRING_CLOUD_CONFIG_URI: http://43.202.52.177:8888
      eureka_client_service-url_defaultZone: http://discovery-server:8761/eureka
      spring_datasource_hikari_maximum-pool-size: 30
      spring_datasource_url: jdbc:postgresql://user-db:5435/user
      spring_datasource_hikari_username: postgres
      spring_datasource_hikari_password: password
      SERVER_PORT: 8010
      spring_redis_host: user-redis
      spring_redis_port: 6379
      server_undertow_no-request-timeout: 100
    depends_on:
      - kafka1
      - user-db
      - discovery-server
      - user-redis
    restart: always
  user-db:
    container_name: user-db
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user
    expose:
      - "5435" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - "5435:5435"
    volumes:
      - pgdata-user:/home/backups
    command: -c wal_level=logical -p 5435
    restart: always

  user-redis:
    image: redis:latest
    container_name: user-redis
    ports:
      - 6379:6379
    expose:
      - 6379
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server /usr/local/conf/redis.conf

  chatting-server:
    container_name: chatting-server
    image: main-service_chatting-server:latest
    build:
      context: ./spring-chatting-backend-server
      dockerfile: Dockerfile
    ports:
      - "8030:8030"
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      SPRING_RABBITMQ_HOST: "43.202.52.177"
      SPRING_CLOUD_CONFIG_URI: http://43.202.52.177:8888
      eureka_client_service-url_defaultZone: http://discovery-server:8761/eureka
      spring_datasource_hikari_maximum-pool-size: 70
      spring_datasource_url: jdbc:postgresql://chat-db:5433/chat
      spring_datasource_hikari_username: postgres
      spring_datasource_hikari_password: password
      SERVER_PORT: 8030
    depends_on:
      - kafka1
      - user-server
      - discovery-server
      - chat-db
    restart: always
  chat-db:
    container_name: chat-db
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=chat
    expose:
      - "5433" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - "5433:5433"
    volumes:
      - pgdata-chat:/home/backups
    command: -c wal_level=logical -p 5433
    restart: always

  customer-server:
    container_name: customer-server
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    image: main-service_customer-server:latest
    ports:
      - "8020:8020"
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      SPRING_RABBITMQ_HOST: "43.202.52.177"
      SPRING_CLOUD_CONFIG_URI: http://43.202.52.177:8888
      eureka_client_service-url_defaultZone: http://discovery-server:8761/eureka
      spring_datasource_hikari_maximum-pool-size: 70
      spring_datasource_url: jdbc:postgresql://customer-db:5434/customer
      spring_datasource_hikari_username: postgres
      spring_datasource_hikari_password: password
      SERVER_PORT: 8020
    depends_on:
      - kafka1
      - user-server
      - discovery-server
      - customer-db
    restart: always
  customer-db:
    container_name: customer-db
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=customer
    expose:
      - "5434" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - "5434:5434"
    volumes:
      - pgdata-customer:/home/backups
    command: -c wal_level=logical -p 5434
    restart: always

  api-server:
    container_name: api-server
    build:
      context: ./apigateway-service
      dockerfile: Dockerfile
    image: main-service_api-server:latest
    ports:
      - "8000:8000"
    environment:
      SPRING_RABBITMQ_HOST: "43.202.52.177"
      SPRING_MAIN_web-application-type: reactive
      SPRING_CLOUD_CONFIG_URI: http://43.202.52.177:8888
      eureka_client_service-url_defaultZone: http://discovery-server:8761/eureka
      SERVER_PORT: 8000
    depends_on:
      - user-server
      - chatting-server
      - customer-server
      - discovery-server
    restart: always

# Persistance DB Volume
volumes:
  pgdata-user:
    name: user-db-volume
  pgdata-chat:
    name: chat-db-volume
  pgdata-customer:
    name: customer-db-volume