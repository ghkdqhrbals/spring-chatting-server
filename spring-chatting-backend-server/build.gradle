plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

jacoco {
	toolVersion = "0.8.8"
}

ext {
	set('springCloudVersion', "2022.0.1")
}

jacocoTestReport {
	dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
	reports {
		xml.enabled false
		html.enabled true
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // 테스트 종료후 항상 리포트 생성
}

group = 'chattingBackend'
version = project.rootProject.ext.projectVersion
sourceCompatibility = '17'

bootJar {
	enabled = true
}

jar {
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	testImplementation 'junit:junit:4.13.1'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation("io.micrometer:micrometer-registry-prometheus")
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:testcontainers:1.19.3"
	testImplementation "org.testcontainers:junit-jupiter:1.19.3"
	testImplementation "org.testcontainers:postgresql:1.19.3"

	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	implementation "io.jsonwebtoken:jjwt-api:0.11.1"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.1"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.1"

	implementation 'org.springframework.boot:spring-boot-configuration-processor';
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'com.google.guava:guava:31.1-jre'

	implementation group: 'org.json', name: 'json', version: '20090211'

    testImplementation 'org.projectlombok:lombok:1.18.26'

	implementation project(':common-dto')

	implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.27'

	implementation 'com.fasterxml.jackson.core:jackson-databind'

	compileOnly 'org.projectlombok:lombok'

	testAnnotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// find the latest jar file in the build/libs directory
def findLatestJar() {
	def jarDir = file("${project.buildDir}/libs")
	def latestJar = null
	if (jarDir.isDirectory()) {
		jarDir.eachFile { file ->
			if (file.name.endsWith('.jar') && !file.name.endsWith('-plain.jar')) { // plain JAR 파일 제외
				if (latestJar == null || file.lastModified() > latestJar.lastModified()) {
					latestJar = file
				}
			}
		}
	}
	return latestJar
}

// create Dockerfile
task generateDockerfile {
	doLast {
		println "Generating Dockerfile from the latest JAR file..."
		def latestJarFile = findLatestJar()
		if (latestJarFile != null) {
			println "Latest Path: \${projectPath}${latestJarFile.absolutePath.replace(project.projectDir.absolutePath, '')}"
			def dockerfileContent =
"""
FROM amazoncorretto:17-alpine3.16-jdk

WORKDIR /${group}

COPY ${latestJarFile.absolutePath.replace(project.projectDir.absolutePath, '')} /${group}/app.jar
ENTRYPOINT java -jar app.jar

LABEL version="${version}"
"""

			// 생성된 Dockerfile 내용을 저장
			file("${project.projectDir}/Dockerfile").text = dockerfileContent
		} else {
			throw new GradleException("No JAR files found in ${project.buildDir}/libs")
		}
	}
}

// build Dockerfile using the latest jar file after the jar file is created
build.finalizedBy generateDockerfile